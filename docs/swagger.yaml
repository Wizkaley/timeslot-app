basePath: /api/v1
definitions:
  models.DeleteTimeSlotRequest:
    properties:
      timeslot:
        example: 02 Jan 06 2-4 PM MST
        type: string
    type: object
  models.Event:
    properties:
      event_end_time:
        type: string
      event_owner:
        type: string
      event_start_time:
        type: string
      id:
        type: string
      participants:
        items:
          type: string
        type: array
      title:
        type: string
    type: object
  models.EventRequest:
    properties:
      event_owner:
        example: uuid
        type: string
      event_time_slot:
        example: 02 Jan 2025 2-4 PM EST
        type: string
      participants:
        example:
        - kevin
        - marco
        items:
          type: string
        type: array
      title:
        example: Brainstorming meeting
        type: string
    type: object
  models.MatchingEventSlots:
    properties:
      Available Participants:
        items:
          type: string
        type: array
      Unavailable Participants:
        items:
          type: string
        type: array
      slot:
        $ref: '#/definitions/models.TimeSlotStartAndEnd'
    type: object
  models.RecommendSlotsRequest:
    properties:
      event_duration:
        example: 1
        type: integer
      organizer:
        example: eshan
        type: string
      participants:
        example:
        - kevin
        - marco
        items:
          type: string
        type: array
    type: object
  models.RecommendSlotsResponse:
    properties:
      Matched Slots:
        items:
          $ref: '#/definitions/models.TimeSlotStartAndEnd'
        type: array
      Partially Matched Slots:
        items:
          $ref: '#/definitions/models.MatchingEventSlots'
        type: array
    type: object
  models.ServiceError:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  models.ServiceMessage:
    properties:
      message:
        type: string
    type: object
  models.TimeSlotResponse:
    properties:
      time_slot:
        items:
          type: string
        type: array
      user_name:
        type: string
    type: object
  models.TimeSlotStartAndEnd:
    properties:
      End Time:
        type: string
      Start Time:
        type: string
    type: object
  models.UserCreateRequest:
    properties:
      name:
        example: eshan
        type: string
    type: object
  models.UserTimeSlotRequest:
    properties:
      time_slots:
        example:
        - 2 Jan 2025 2 - 4 PM EST
        - 14 Jan 2025 6-9 PM EST
        items:
          type: string
        type: array
      user_name:
        example: eshan
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server celler server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: OpenAPI Time Slot App API
  version: "1.0"
paths:
  /:username:
    delete:
      consumes:
      - application/json
      description: Delete time slot for a user by name
      parameters:
      - description: Timeslot request body
        in: path
        name: username
        required: true
        type: string
      - description: Delete time slot request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.DeleteTimeSlotRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ServiceMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ServiceError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ServiceError'
      summary: Delete a time slot
      tags:
      - Timeslots
    get:
      consumes:
      - application/json
      description: Get time slot for a user by name
      parameters:
      - description: Timeslot request body
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TimeSlotResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ServiceError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ServiceError'
      summary: Get a time slot
      tags:
      - Timeslots
  /events:
    post:
      consumes:
      - application/json
      description: Create a new Event
      parameters:
      - description: Create Event request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.EventRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Event created successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ServiceError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ServiceError'
      summary: Create a Event
      tags:
      - Events
  /events/{eventID}:
    delete:
      consumes:
      - application/json
      description: Delete a Event
      parameters:
      - description: Event ID
        in: path
        name: eventID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Event deleted successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ServiceError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ServiceError'
      summary: Delete a Event
      tags:
      - Events
    get:
      consumes:
      - application/json
      description: Get Event by ID
      parameters:
      - description: Event ID
        in: path
        name: eventID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Event'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ServiceError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ServiceError'
      summary: Get a Event
      tags:
      - Events
  /events/{username}:
    get:
      consumes:
      - application/json
      description: Get Events for a user
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Event'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ServiceError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ServiceError'
      summary: Get Events for a user
      tags:
      - Events
  /recommend:
    get:
      consumes:
      - application/json
      description: Recommend time slots for the given organizer and participants
      parameters:
      - description: Recommendation request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.RecommendSlotsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RecommendSlotsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ServiceError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ServiceError'
      summary: Recommend time slots
      tags:
      - Timeslots
  /timeslot:
    post:
      consumes:
      - application/json
      description: Create time slot for a user
      parameters:
      - description: Timeslot request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.UserTimeSlotRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ServiceMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ServiceError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ServiceError'
      summary: Create a time slot
      tags:
      - Timeslots
  /user:
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: Create User request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.UserCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User created successfully
          schema:
            type: string
        "400":
          description: Invalid request body
          schema:
            type: string
        "500":
          description: Error creating user
          schema:
            type: string
      summary: Create a user
      tags:
      - Users
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
