// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/:username": {
            "get": {
                "description": "Get time slot for a user by name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Timeslots"
                ],
                "summary": "Get a time slot",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Timeslot request body",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.TimeSlotResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete time slot for a user by name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Timeslots"
                ],
                "summary": "Delete a time slot",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Timeslot request body",
                        "name": "username",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Delete time slot request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.DeleteTimeSlotRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceMessage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceError"
                        }
                    }
                }
            }
        },
        "/events": {
            "post": {
                "description": "Create a new Event",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Events"
                ],
                "summary": "Create a Event",
                "parameters": [
                    {
                        "description": "Create Event request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.EventRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Event created successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceError"
                        }
                    }
                }
            }
        },
        "/events/{eventID}": {
            "get": {
                "description": "Get Event by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Events"
                ],
                "summary": "Get a Event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID",
                        "name": "eventID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Event"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a Event",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Events"
                ],
                "summary": "Delete a Event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID",
                        "name": "eventID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Event deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceError"
                        }
                    }
                }
            }
        },
        "/events/{username}": {
            "get": {
                "description": "Get Events for a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Events"
                ],
                "summary": "Get Events for a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Event"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceError"
                        }
                    }
                }
            }
        },
        "/recommend": {
            "get": {
                "description": "Recommend time slots for the given organizer and participants",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Timeslots"
                ],
                "summary": "Recommend time slots",
                "parameters": [
                    {
                        "description": "Recommendation request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RecommendSlotsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.RecommendSlotsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceError"
                        }
                    }
                }
            }
        },
        "/timeslot": {
            "post": {
                "description": "Create time slot for a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Timeslots"
                ],
                "summary": "Create a time slot",
                "parameters": [
                    {
                        "description": "Timeslot request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserTimeSlotRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceMessage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceError"
                        }
                    }
                }
            }
        },
        "/user": {
            "post": {
                "description": "Create a new user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Create a user",
                "parameters": [
                    {
                        "description": "Create User request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User created successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error creating user",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.DeleteTimeSlotRequest": {
            "type": "object",
            "properties": {
                "timeslot": {
                    "type": "string",
                    "example": "02 Jan 06 2-4 PM MST"
                }
            }
        },
        "models.Event": {
            "type": "object",
            "properties": {
                "event_end_time": {
                    "type": "string"
                },
                "event_owner": {
                    "type": "string"
                },
                "event_start_time": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "participants": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "models.EventRequest": {
            "type": "object",
            "properties": {
                "event_owner": {
                    "type": "string",
                    "example": "uuid"
                },
                "event_time_slot": {
                    "type": "string",
                    "example": "02 Jan 2025 2-4 PM EST"
                },
                "participants": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "kevin",
                        "marco"
                    ]
                },
                "title": {
                    "type": "string",
                    "example": "Brainstorming meeting"
                }
            }
        },
        "models.MatchingEventSlots": {
            "type": "object",
            "properties": {
                "Available Participants": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "Unavailable Participants": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "slot": {
                    "$ref": "#/definitions/models.TimeSlotStartAndEnd"
                }
            }
        },
        "models.RecommendSlotsRequest": {
            "type": "object",
            "properties": {
                "event_duration": {
                    "type": "integer",
                    "example": 1
                },
                "organizer": {
                    "type": "string",
                    "example": "eshan"
                },
                "participants": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "kevin",
                        "marco"
                    ]
                }
            }
        },
        "models.RecommendSlotsResponse": {
            "type": "object",
            "properties": {
                "Matched Slots": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.TimeSlotStartAndEnd"
                    }
                },
                "Partially Matched Slots": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.MatchingEventSlots"
                    }
                }
            }
        },
        "models.ServiceError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.ServiceMessage": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "models.TimeSlotResponse": {
            "type": "object",
            "properties": {
                "time_slot": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "user_name": {
                    "type": "string"
                }
            }
        },
        "models.TimeSlotStartAndEnd": {
            "type": "object",
            "properties": {
                "End Time": {
                    "type": "string"
                },
                "Start Time": {
                    "type": "string"
                }
            }
        },
        "models.UserCreateRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": "eshan"
                }
            }
        },
        "models.UserTimeSlotRequest": {
            "type": "object",
            "properties": {
                "time_slots": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "2 Jan 2025 2 - 4 PM EST",
                        "14 Jan 2025 6-9 PM EST"
                    ]
                },
                "user_name": {
                    "type": "string",
                    "example": "eshan"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    },
    "externalDocs": {
        "description": "OpenAPI",
        "url": "https://swagger.io/resources/open-api/"
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "OpenAPI Time Slot App API",
	Description:      "This is a sample server celler server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
